Модули
======

1 файл == 1 модуль.


Заголовок модуля
----------------

В общем виде:

< module НАЗВАНИЕ ЭКСПОРТ where

Пример:

< module Rocket
<     ( Rocket (..)
<     , makeRocket
<     , launch
<     ) where

Список экспорта не обязателен:

< module Rocket where


Main
----

Отсутствующий заголовок эквивалентен такому:

< module Main (main) where

То есть заголовок может отсутствовать только в одном модуле программы
(executable, test или benchmark) — главном.
Во всех модулях библиотек и остальных модулях программ заголовки должны быть.


Имя модуля
----------

Должно начинаться с большой буквы.
Может быть вложенным, части разделяются точками:

< module Space.Rocket.Launch where

Имя должно совпадать с путём файла относительно каталога исходников
(с добавкой расширения), установленного в кабальном файле.

Например, если пакет лежит в каталоге `/home/hax0r/rockets`,
а в кабальном файле написано `source-dirs: src`,
то модуль `Space.Rocket.Launch` должен находиться в файле
`/home/hax0r/rockets/src/Space/Rocket/Launch.hs`.

Никаких альтернативных способов вроде `__init__.py` или `mod.rs` нет.


Список экспортируемых символов
------------------------------

Список символов, видимых снаружи.

Если список экспорта пустой, экспортируется всё, что определено в данном модуле.
В общем случае это плохой тон,
ибо может приводить к ошибкам компиляции при смене версий третьих библиотек.
Допустимо для модулей, содержащих, например, список констант.
Допустимо для внутренних (не публичных) модулей, но всё равно не рекомедуется.

Не экспортируемые символы нельзя использовать вне модуля.
Так в Хаскелле реализуется сокрытие реализации.

В частности, можно экспортировать только тип, но не его конструкторы.
Тогда для создания значений этого типа снаружи потребуются отдельные функции.

< module A (A (..)) where -- экспортируется тип А со всеми потрохами
< data A = A | B

< module A (A (A)) where  -- экспортируется тип А только с конструктором А

< module A (A) where      -- экспортируется тип А без конструкторов

Экспортировать конструктор данных без типа нельзя.
